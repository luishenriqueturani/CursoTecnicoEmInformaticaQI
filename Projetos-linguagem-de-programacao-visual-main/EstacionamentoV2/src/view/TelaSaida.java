package view;

import model.CRUD;
import controller.Metodos;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Dados;

/**
 *
 * @author Luís
 */
public class TelaSaida extends javax.swing.JFrame {

    GUI t = new GUI();
    Metodos m = new Metodos();

    /**
     * Creates new form TelaSaida
     */
    public TelaSaida() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) jTCad.getModel();
        jTCad.setRowSorter(new TableRowSorter(model));
        lerTabela();
    }

    private void lerTabela() {
        DefaultTableModel model = (DefaultTableModel) jTCad.getModel();
        CRUD c = new CRUD();
        model.setNumRows(0);
        for (Dados d : c.read()) {
            model.addRow(new Object[]{
                d.getId(), d.getVaga(), d.getNome(), d.getRg(), d.getPlaca()
            });
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTCad = new javax.swing.JTable();
        btnConf = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnAtualizar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Saída de Cliente");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imagens/carro-icon.png")).getImage());

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));

        jTCad.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTCad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Vaga", "Nome", "RG", "Placa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTCad);

        btnConf.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnConf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Cadastrar.png"))); // NOI18N
        btnConf.setText("Confirmar");
        btnConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Escolha qual deseja dar a saída");

        btnAtualizar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/atualizar.png"))); // NOI18N
        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnVoltar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/Voltar.png"))); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnConf)
                        .addGap(26, 26, 26)
                        .addComponent(btnAtualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVoltar)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConf)
                    .addComponent(btnAtualizar)
                    .addComponent(btnVoltar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        // TODO add your handling code here:
        lerTabela();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        // TODO add your handling code here:
        FramePrincipal f = new FramePrincipal();
        f.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfActionPerformed
        // TODO add your handling code here:
        //Se uma linha da tabela estiver selecionada avança, senão...
        if (jTCad.getSelectedRow() != -1) {
            //chama os objetos locais
            Dados d = new Dados();
            CRUD c = new CRUD();

            //busca o ID que está mostrando na linha selecionada da tabela
            d.setId((int) jTCad.getValueAt(jTCad.getSelectedRow(), 0));

            //chama o método passando por parâmetro o objeto d
            c.readUm(d);
            //se o retorno da tela de confirmação for == 0 faz o if, senão não faz nada
            if (t.confirmar() == 0) {
                try {
                    //recebe o horário de saída pelo usuário, convertendo o valor pela classe Metodos
                    int horaSaida = m.stringToInt(t.informarDadoA("hora de saída"));
                    //variável local de controle
                    boolean con = true;
                    
                    //pega do banco o horário de entrada
                    int horaEntrada = c.readUm(d).get(0).getHora();
                    
                    //enquanto o horário de entrada for maior que o horário de saída
                    //ou o horário de saída for maior que 23, fica prezo no while
                    while (con) {
                        //compara os horários
                        if (horaSaida < horaEntrada) {
                            //mostra mensagem
                            t.criarMensagem("O horário de saída não pode ser anterior ao de entrada!", "Atenção", 2);
                            //recebe novo valor, já sendo convertido na classe Metodos
                            horaSaida = m.stringToInt(t.informarDadoA("hora de saída"));
                        //compara horaSaida com o horário limite
                        }else if(horaSaida > 23){
                            //mostra mensagem
                            t.criarMensagem("O horário de saída não pode ser maior que 23 horas!", "Atenção", 2);
                            //pede novo valor, já convertido em Metodos
                            horaSaida = m.stringToInt(t.informarDadoA("hora de saída"));
                        }else{
                            //se não cair em nenhum dos if cai aqui, significando que está tudo ok,
                            //a variável de controle recebe false fazendo sair do while
                            con = false;
                        }
                    }//fim do while
                    
                    //mostra mensagem com todos os dados do cliente, 
                    //na última linha da mensagem está um cálculo que é feito em Metodos, retornando apenas
                    //o valor a pagar, de acordo com os horários.
                    t.criarMensagem("Nome: " + c.readUm(d).get(0).getNome() + "\n"
                            + "RG: " + c.readUm(d).get(0).getRg() + "\n"
                            + "Telefone: " + c.readUm(d).get(0).getTelefone() + "\n"
                            + "Placa: " + c.readUm(d).get(0).getPlaca() + "\n"
                            + "Marca: " + c.readUm(d).get(0).getMarca() + "\n"
                            + "Modelo: " + c.readUm(d).get(0).getModelo() + "\n"
                            + "Cor: " + c.readUm(d).get(0).getCor() + "\n"
                            + "Hora de entrada: " + horaEntrada + "\n"
                            + "Hora de saída: "+horaSaida+"\n"
                            + "Total a pagar: "+m.pagar(horaEntrada, horaSaida), "Dados do Cliente", 1);
                    
                    //chama o método deletar, para apagar os registros do BD
                    deletar();

                } catch (Exception e) {
                    //Caso aconteça um erro aparece esta mensagem de erro
                    t.criarMensagem("Erro! Digite apenas números inteiros no campo de horas!\nErro: "+e, "Erro!", 0);
                }

            }

            //volta a ler a tabela
            lerTabela();

        } else {//senão mostra uma mensagem de erro
            t.criarMensagem("Escolha uma linha!", "Atenção!", 2);
        }
    }//GEN-LAST:event_btnConfActionPerformed

    private void deletar() {

        //chama os objetos locais
        Dados d = new Dados();
        CRUD c = new CRUD();

        //busca o ID que está mostrando na linha selecionada da tabela
        //isto não é conversão de valores, eu estou garantindo apenas que entrará apenas valores inteiros
        d.setId( (int) jTCad.getValueAt(jTCad.getSelectedRow(), 0));

        //chama o método passando por parâmetro o objeto d
        c.delete(d);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaSaida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaSaida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaSaida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaSaida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaSaida().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnConf;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTCad;
    // End of variables declaration//GEN-END:variables
}
